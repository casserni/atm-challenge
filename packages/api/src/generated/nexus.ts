/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as Context from "../context"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  IntFilter: { // input type
    equals?: number | null; // Int
    gt?: number | null; // Int
    gte?: number | null; // Int
    in?: number[] | null; // [Int!]
    lt?: number | null; // Int
    lte?: number | null; // Int
    not?: number | null; // Int
    notIn?: number[] | null; // [Int!]
  }
  QueryUsersWhereInput: { // input type
    id?: NexusGenInputs['IntFilter'] | null; // IntFilter
  }
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Mutation: {};
  Query: {};
  accounts: { // root type
    balance: number; // Int!
    daily_withdrawal_limit: number; // Int!
    id: number; // Int!
    type: string; // String!
    user_id: number; // Int!
  }
  transactions: { // root type
    account_id?: number | null; // Int
    amount: number; // Int!
    id: number; // Int!
    type: string; // String!
  }
  users: { // root type
    id: number; // Int!
    name: string; // String!
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  IntFilter: NexusGenInputs['IntFilter'];
  QueryUsersWhereInput: NexusGenInputs['QueryUsersWhereInput'];
}

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    deposit: NexusGenRootTypes['accounts'] | null; // accounts
    login: number | null; // Int
    withdraw: NexusGenRootTypes['accounts'] | null; // accounts
  }
  Query: { // field return type
    users: NexusGenRootTypes['users'][]; // [users!]!
  }
  accounts: { // field return type
    balance: number; // Int!
    daily_withdrawal_limit: number; // Int!
    id: number; // Int!
    remaining_withdrawal_limit: number; // Int!
    transactions: NexusGenRootTypes['transactions'][]; // [transactions!]!
    type: string; // String!
    user_id: number; // Int!
  }
  transactions: { // field return type
    account_id: number | null; // Int
    amount: number; // Int!
    id: number; // Int!
    type: string; // String!
  }
  users: { // field return type
    accounts: NexusGenRootTypes['accounts'][]; // [accounts!]!
    id: number; // Int!
    name: string; // String!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    deposit: { // args
      accountId: number; // Int!
      amount: number; // Int!
    }
    login: { // args
      pin: string; // String!
    }
    withdraw: { // args
      accountId: number; // Int!
      amount: number; // Int!
    }
  }
  Query: {
    users: { // args
      skip?: number | null; // Int
      where?: NexusGenInputs['QueryUsersWhereInput'] | null; // QueryUsersWhereInput
    }
  }
  accounts: {
    transactions: { // args
      skip?: number | null; // Int
    }
  }
  users: {
    accounts: { // args
      skip?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Mutation" | "Query" | "accounts" | "transactions" | "users";

export type NexusGenInputNames = "IntFilter" | "QueryUsersWhereInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}